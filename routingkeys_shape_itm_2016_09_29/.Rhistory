property_data$Delisted <- NA
property_data$Postcode <- NA
property_data$Townland <- NA
for (i in 1:nrow(property_data)) {
if (i%%1000 == 0) { print(i) }
# address_temp <- property_data$Address[i]
pos = regexpr("(DE-LISTED)", property_data$Address[i], ignore.case = TRUE)
if (pos[1] > 0) {
property_data$Delisted[i] <- 1 # means de-listed, i.e. sold
property_data$Address[i] <- substr(property_data$Address[i], 1, pos[1]-3) # not sure why, but -3 works!
}
# get positions of commas
pos = gregexpr(",", property_data$Address[i]); pos = pos[[1]]
last_pos = pos[length(pos)]
area_temp = substr(property_data$Address[i], last_pos+2,
nchar(property_data$Address[i]))
# last part was either broad area or postcode, take out
if (grepl("[0-9]", area_temp)) {
property_data$Postcode[i] <- substr(property_data$Address[i], last_pos+2,
nchar(property_data$Address[i]))
} else {
property_data$Area[i] <- substr(property_data$Address[i], last_pos+2,
nchar(property_data$Address[i]))
}
property_data$Address[i] <- substr(property_data$Address[i], 1, last_pos-1)
# next part is townland
pos = gregexpr(",", property_data$Address[i]); pos = pos[[1]]
last_pos = pos[length(pos)]
property_data$Townland[i] = substr(property_data$Address[i], last_pos+2,
nchar(property_data$Address[i]))
}
townlands <- unique(property_data$Townland)
townlands
townlands <- data.frame(unique(property_data$Townland), stringsAsFactors = FALSE)
View(townlands)
rm(list = ls())
# load data
load("C:/Users/loughnge/Dropbox/Maps/Property Data.Rda")
# drop factors/levels from data frame
# bob <- data.frame(lapply(bob, as.character), stringsAsFactors=FALSE)
property_data[] <- lapply(property_data, as.character)
# remove annoying spaces in names
colnames(property_data) <- c("ID", "Address", "Area", "Agent", "Property_Type",
"Beds", "Description", "First_Date", "Last_Date",
"First_Price", "Last_Price")
# change price to numeric
euro <- "\u20AC"
property_data$First_Price <- gsub(euro, "", property_data$First_Price)
property_data$Last_Price <- gsub(euro, "", property_data$Last_Price)
property_data$First_Price <- gsub(",", "", property_data$First_Price)
property_data$Last_Price <- gsub(",", "", property_data$Last_Price)
property_data$First_Price <- as.numeric(property_data$First_Price)
property_data$Last_Price <- as.numeric(property_data$Last_Price)
# change no of beds to numeric
property_data$Beds <- as.numeric(property_data$Beds)
# find out if property is sold
property_data$Delisted <- NA
property_data$Postcode <- NA
property_data$Townland <- NA
for (i in 1:nrow(property_data)) {
if (i%%1000 == 0) { print(i) }
# address_temp <- property_data$Address[i]
pos = regexpr("(DE-LISTED)", property_data$Address[i], ignore.case = TRUE)
if (pos[1] > 0) {
property_data$Delisted[i] <- 1 # means de-listed, i.e. sold
property_data$Address[i] <- substr(property_data$Address[i], 1, pos[1]-3) # not sure why, but -3 works!
}
# get positions of commas
pos = gregexpr(",", property_data$Address[i]); pos = pos[[1]]
last_pos = pos[length(pos)]
area_temp = substr(property_data$Address[i], last_pos+2,
nchar(property_data$Address[i]))
# last part was either broad area or postcode, take out
if (grepl("[0-9]", area_temp)) {
property_data$Postcode[i] <- substr(property_data$Address[i], last_pos+2,
nchar(property_data$Address[i]))
} else {
property_data$Area[i] <- substr(property_data$Address[i], last_pos+2,
nchar(property_data$Address[i]))
}
property_data$Address[i] <- substr(property_data$Address[i], 1, last_pos-1)
# next part is townland, keep it in address though
pos = gregexpr(",", property_data$Address[i]); pos = pos[[1]]
last_pos = pos[length(pos)]
town_temp = substr(property_data$Address[i], last_pos+2,
nchar(property_data$Address[i]))
if (!grepl("[0-9]", town_temp)) {
property_data$Townland[i] = town_temp
}
}
townlands <- data.frame(unique(property_data$Townland), stringsAsFactors = FALSE)
townlands <- data.frame(unique(property_data$Townland), stringsAsFactors = FALSE)
colnames(townlands) <- c('Townland', 'Instances')
for (i in 1:nrow(townlands)) {
townlands$Instances[i] <- sum(property_data$Townland == townlands$Townland[i])
}
sum(property_data$Townland == townlands$Townland[i])
i
townlands <- data.frame(unique(property_data$Townland), stringsAsFactors = FALSE)
for (i in 1:nrow(townlands)) {
townlands$Instances[i] <- sum(property_data$Townland == townlands$Townland[i])
}
townlands$Townland[i]
townlands <- data.frame(unique(property_data$Townland), stringsAsFactors = FALSE)
colnames(townlands) <- c('Townland')
for (i in 1:nrow(townlands)) {
townlands$Instances[i] <- sum(property_data$Townland == townlands$Townland[i])
}
townlands$Townland[i]
i = 1
sum(property_data$Townland == townlands$Townland[i])
property_data$Townland == townlands$Townland[i]
townlands <- data.frame(unique(property_data$Townland), stringsAsFactors = FALSE)
colnames(townlands) <- c('Townland')
for (i in 1:nrow(townlands)) {
townlands$Instances[i] <- sum(property_data$Townland == townlands$Townland[i],
na.rm = TRUE)
}
townlands <- with(townlands,  townlands[order(townlands$Townland) , ])
town_temp
length(town_temp)
townlands <- with(townlands,  townlands[order(townlands$Instances) , ])
townlands <- with(townlands,  townlands[order(townlands$Instances, decreasing = TRUE), ])
townlands <- townlands(townlands$Instances > 2)
townlands <- townlands[townlands$Instances > 2, ]
property_data$Address[60870]
i = 60870
pos = regexpr("(DE-LISTED)", property_data$Address[i], ignore.case = TRUE)
if (pos[1] > 0) {
property_data$Delisted[i] <- 1 # means de-listed, i.e. sold
property_data$Address[i] <- substr(property_data$Address[i], 1, pos[1]-3) # not sure why, but -3 works!
}
rm(list = ls())
# load data
load("C:/Users/loughnge/Dropbox/Maps/Property Data.Rda")
# drop factors/levels from data frame
# bob <- data.frame(lapply(bob, as.character), stringsAsFactors=FALSE)
property_data[] <- lapply(property_data, as.character)
# remove annoying spaces in names
colnames(property_data) <- c("ID", "Address", "Area", "Agent", "Property_Type",
"Beds", "Description", "First_Date", "Last_Date",
"First_Price", "Last_Price")
# change price to numeric
euro <- "\u20AC"
property_data$First_Price <- gsub(euro, "", property_data$First_Price)
property_data$Last_Price <- gsub(euro, "", property_data$Last_Price)
property_data$First_Price <- gsub(",", "", property_data$First_Price)
property_data$Last_Price <- gsub(",", "", property_data$Last_Price)
property_data$First_Price <- as.numeric(property_data$First_Price)
property_data$Last_Price <- as.numeric(property_data$Last_Price)
# change no of beds to numeric
property_data$Beds <- as.numeric(property_data$Beds)
# find out if property is sold
property_data$Delisted <- NA
property_data$Postcode <- NA
property_data$Townland <- NA
for (i in 1:nrow(property_data)) {
if (i%%1000 == 0) { print(i) }
# address_temp <- property_data$Address[i]
pos = regexpr("(DE-LISTED)", property_data$Address[i], ignore.case = TRUE)
if (pos[1] > 0) {
property_data$Delisted[i] <- 1 # means de-listed, i.e. sold
property_data$Address[i] <- substr(property_data$Address[i], 1, pos[1]-3) # not sure why, but -3 works!
}
# get positions of commas
pos = gregexpr(",", property_data$Address[i]); pos = pos[[1]]
last_pos = pos[length(pos)]
area_temp = substr(property_data$Address[i], last_pos+2,
nchar(property_data$Address[i]))
# last part was either broad area or postcode, take out
if (grepl("[0-9]", area_temp)) {
property_data$Postcode[i] <- substr(property_data$Address[i], last_pos+2,
nchar(property_data$Address[i]))
} else {
property_data$Area[i] <- substr(property_data$Address[i], last_pos+2,
nchar(property_data$Address[i]))
}
property_data$Address[i] <- substr(property_data$Address[i], 1, last_pos-1)
# next part is townland, keep it in address though
pos = gregexpr(",", property_data$Address[i]); pos = pos[[1]]
last_pos = pos[length(pos)]
town_temp = substr(property_data$Address[i], last_pos+2,
nchar(property_data$Address[i]))
if (nchar(town_temp)> 0 & !grepl("[0-9]", town_temp)) {
property_data$Townland[i] = town_temp
}
}
rm(list = ls())
# load data
load("C:/Users/loughnge/Dropbox/Maps/Property Data.Rda")
# drop factors/levels from data frame
# bob <- data.frame(lapply(bob, as.character), stringsAsFactors=FALSE)
property_data[] <- lapply(property_data, as.character)
# remove annoying spaces in names
colnames(property_data) <- c("ID", "Address", "Area", "Agent", "Property_Type",
"Beds", "Description", "First_Date", "Last_Date",
"First_Price", "Last_Price")
# change price to numeric
euro <- "\u20AC"
property_data$First_Price <- gsub(euro, "", property_data$First_Price)
property_data$Last_Price <- gsub(euro, "", property_data$Last_Price)
property_data$First_Price <- gsub(",", "", property_data$First_Price)
property_data$Last_Price <- gsub(",", "", property_data$Last_Price)
property_data$First_Price <- as.numeric(property_data$First_Price)
property_data$Last_Price <- as.numeric(property_data$Last_Price)
# change no of beds to numeric
property_data$Beds <- as.numeric(property_data$Beds)
# find out if property is sold
property_data$Delisted <- NA
property_data$Postcode <- NA
property_data$Townland <- NA
for (i in 1:nrow(property_data)) {
if (i%%1000 == 0) { print(i) }
# address_temp <- property_data$Address[i]
pos = regexpr("(DE-LISTED)", property_data$Address[i], ignore.case = TRUE)
if (pos[1] > 0) {
property_data$Delisted[i] <- 1 # means de-listed, i.e. sold
property_data$Address[i] <- substr(property_data$Address[i], 1, pos[1]-3) # not sure why, but -3 works!
}
#
# # get positions of commas
# pos = gregexpr(",", property_data$Address[i]); pos = pos[[1]]
# last_pos = pos[length(pos)]
# area_temp = substr(property_data$Address[i], last_pos+2,
#                    nchar(property_data$Address[i]))
# # last part was either broad area or postcode, take out
# if (grepl("[0-9]", area_temp)) {
#   property_data$Postcode[i] <- substr(property_data$Address[i], last_pos+2,
#                                   nchar(property_data$Address[i]))
# } else {
#   property_data$Area[i] <- substr(property_data$Address[i], last_pos+2,
#                                   nchar(property_data$Address[i]))
# }
# property_data$Address[i] <- substr(property_data$Address[i], 1, last_pos-1)
#
# # next part is townland, keep it in address though
# pos = gregexpr(",", property_data$Address[i]); pos = pos[[1]]
# last_pos = pos[length(pos)]
# town_temp = substr(property_data$Address[i], last_pos+2,
#                    nchar(property_data$Address[i]))
# if (nchar(town_temp)> 0 & !grepl("[0-9]", town_temp)) {
#   property_data$Townland[i] = town_temp
# }
}
rm(list = ls())
# load data
load("C:/Users/loughnge/Dropbox/Maps/Property Data.Rda")
# drop factors/levels from data frame
# bob <- data.frame(lapply(bob, as.character), stringsAsFactors=FALSE)
property_data[] <- lapply(property_data, as.character)
# remove annoying spaces in names
colnames(property_data) <- c("ID", "Address", "Area", "Agent", "Property_Type",
"Beds", "Description", "First_Date", "Last_Date",
"First_Price", "Last_Price")
# change price to numeric
euro <- "\u20AC"
property_data$First_Price <- gsub(euro, "", property_data$First_Price)
property_data$Last_Price <- gsub(euro, "", property_data$Last_Price)
property_data$First_Price <- gsub(",", "", property_data$First_Price)
property_data$Last_Price <- gsub(",", "", property_data$Last_Price)
property_data$First_Price <- as.numeric(property_data$First_Price)
property_data$Last_Price <- as.numeric(property_data$Last_Price)
# change no of beds to numeric
property_data$Beds <- as.numeric(property_data$Beds)
# find out if property is sold
property_data$Delisted <- NA
property_data$Postcode <- NA
property_data$Townland <- NA
for (i in 1:nrow(property_data)) {
if (i%%1000 == 0) { print(i) }
# address_temp <- property_data$Address[i]
pos = regexpr("(DE-LISTED)", property_data$Address[i], ignore.case = TRUE)
if (pos[1] > 0) {
property_data$Delisted[i] <- 1 # means de-listed, i.e. sold
property_data$Address[i] <- substr(property_data$Address[i], 1, pos[1]-3) # not sure why, but -3 works!
}
# get positions of commas
pos = gregexpr(",", property_data$Address[i]); pos = pos[[1]]
last_pos = pos[length(pos)]
area_temp = substr(property_data$Address[i], last_pos+2,
nchar(property_data$Address[i]))
# last part was either broad area or postcode, take out
if (grepl("[0-9]", area_temp)) {
property_data$Postcode[i] <- substr(property_data$Address[i], last_pos+2,
nchar(property_data$Address[i]))
} else {
property_data$Area[i] <- substr(property_data$Address[i], last_pos+2,
nchar(property_data$Address[i]))
}
property_data$Address[i] <- substr(property_data$Address[i], 1, last_pos-1)
# next part could be Dublin X etc, take it out
pos = gregexpr(",", property_data$Address[i]); pos = pos[[1]]
last_pos = pos[length(pos)]
area_temp = substr(property_data$Address[i], last_pos+2,
nchar(property_data$Address[i]))
if (grepl("Dublin [0-9]", area_temp)) {
property_data$Postcode[i] <- substr(property_data$Address[i], last_pos+2,
nchar(property_data$Address[i]))
property_data$Address[i] <- substr(property_data$Address[i], 1, last_pos-1)
}
# next part is townland, keep it in address though
pos = gregexpr(",", property_data$Address[i]); pos = pos[[1]]
last_pos = pos[length(pos)]
town_temp = substr(property_data$Address[i], last_pos+2,
nchar(property_data$Address[i]))
if (nchar(town_temp)> 0 & !grepl("[0-9]", town_temp)) {
property_data$Townland[i] = town_temp
}
}
# identify proper townlands
townlands <- data.frame(unique(property_data$Townland), stringsAsFactors = FALSE)
colnames(townlands) <- c('Townland')
for (i in 1:nrow(townlands)) {
townlands$Instances[i] <- sum(property_data$Townland == townlands$Townland[i],
na.rm = TRUE)
}
# sort
townlands <- with(townlands,  townlands[order(townlands$Instances, decreasing = TRUE), ])
townlands <- townlands[townlands$Instances > 2, ]
deleted_areas <- sum(townlands$Instances <= 2)
townlands$Instances <= 2
townlands <- data.frame(unique(property_data$Townland), stringsAsFactors = FALSE)
colnames(townlands) <- c('Townland')
for (i in 1:nrow(townlands)) {
townlands$Instances[i] <- sum(property_data$Townland == townlands$Townland[i],
na.rm = TRUE)
}
# sort
townlands <- with(townlands,  townlands[order(townlands$Instances, decreasing = TRUE), ])
deleted_areas <- sum(townlands$Instances <= 2)
townlands <- townlands[townlands$Instances > 2, ]
if(!require(installr)) {
install.packages("installr"); require(installr)} #load / install+load installr
# using the package:
updateR() # this will start the updating process of your R installation.
library(lme4)
drug_tab <- read.csv("C:/Users/loughnge/Dropbox/Drugs/Drug Analysis/Analysis_12_12_16/drug_lme.csv",
header = FALSE, stringsAsFactors = FALSE)
# V1: SubjID, V2: DrugID, V3: RT, V4: CPP/P3a
summary(lme_mod <-lmer(V3 ~ V4*V2 + (1 | V1),
data = drug_tab, REML=FALSE, na.action = na.omit))
# extract coefficients
coefs <- data.frame(coef(summary(lme_mod)))
# use normal distribution to approximate p-value
coefs$p.z <- 2 * (1 - pnorm(abs(coefs$t.value)))
coefs
library(lme4)
drug_tab <- read.csv("C:/Users/loughnge/Dropbox/Drugs/Drug Analysis/Analysis_12_12_16/drug_lme.csv",
header = FALSE, stringsAsFactors = FALSE)
# V1: SubjID, V2: DrugID, V3: RT, V4: CPP/P3a
summary(lme_mod <-lmer(V3 ~ V4*V2 + (1 | V1),
data = drug_tab, REML=FALSE, na.action = na.omit))
# extract coefficients
coefs <- data.frame(coef(summary(lme_mod)))
# use normal distribution to approximate p-value
coefs$p.z <- 2 * (1 - pnorm(abs(coefs$t.value)))
coefs
library(lme4)
drug_tab <- read.csv("C:/Users/loughnge/Dropbox/Drugs/Drug Analysis/Analysis_12_12_16/drug_lme.csv",
header = FALSE, stringsAsFactors = FALSE)
# V1: SubjID, V2: DrugID, V3: RT, V4: CPP/P3a
summary(lme_mod <-lmer(V3 ~ V4*V2 + (1 | V1),
data = drug_tab, REML=FALSE, na.action = na.omit))
# extract coefficients
coefs <- data.frame(coef(summary(lme_mod)))
# use normal distribution to approximate p-value
coefs$p.z <- 2 * (1 - pnorm(abs(coefs$t.value)))
coefs
rm(list = ls())
cat("\014")
# Required packages
libs <- c("rgdal", "maptools", "gridExtra", "gpclib", "PBSmapping", "rgeos",
"ggplot2", "ggmap")
lapply(libs, require, character.only = TRUE)
gpclibPermit()
file <- "RoutingKeys_ITM_region"
setwd("C:/Users/loughnge/Dropbox/Maps/Complete_Set_Of_SAPS_2011/Polygons/routingkeys_shape_itm_2016_09_29/")
# print info from shapefile
# EC_info <- ogrInfo(".", file)
# read in shapefile
EC_temp <- readOGR(".", file)
# projections
print(proj4string(EC_temp))
# convert
EC_temp <- spTransform(EC_temp, CRS("+proj=longlat +lat_0=53.5 +lon_0=-8"))
# fortify
EC_temp <- fortify(EC_temp)
# change ID to numeric in order to use it as a scale. won't need this after I get property prices
EC_temp$id <- as.numeric(EC_temp$id)
# plot(EC_temp, axes=TRUE, border="gray")
# dublin_center = as.numeric(geocode("Dublin Ireland", source = "google"))
# dublinMap = ggmap(get_googlemap(center=dublin_center, scale=2, zoom=10), extent="normal")
ireland_center = as.numeric(geocode("Ireland", source = "google"))
ireland_center[1] = ireland_center[1]-0.5
ireland_center[2] = ireland_center[2]+0.37
irelandMap = ggmap(get_googlemap(center=ireland_center, scale=2, zoom=7), extent="normal")
irelandMap +
geom_polygon(data=EC_temp, mapping=aes(x=long, y=lat, fill=id, group=group),
size=.2, color='black', alpha=0.5) +
scale_fill_gradient(name = "Price", low = "blue", high = "red")
hp <- read.csv("C:/Users/loughnge/Dropbox/Maps/Excel files/CSO House Value by Eircode.csv",
header = FALSE, stringsAsFactors = FALSE)
hp <- hp[, 4:90]
for (i in 13:5:nrow(hp)) {
if (i%%100 == 0) { print(i) }
}
for (i in 13:nrow(hp)) {
if (i%%100 == 0) { print(i) }
}
eircode_index <- seq(13, nrow(hp), by=5)
eircode_index
eircode_names <- hp$V4
eircode_names
ls(eircode_index)
ls(eircode_names)
ls()
typeof(get(ls()))
typeof(eircode_names)
get(eircode_names)
typeof(get(ls(eircode_names)))
class(eircode_names)
class(hp)
class(eircode_index)
for (i in 1:nrow(eircode_names)) {
print(length(eircode_names[, i]))
# if (i%%100 == 0) { print(i) }
}
print(length(eircode_names[i, ]))
eircode_names[1, ]
eircode_names[1]
print(length(eircode_names[i]))
for (i in 1:nrow(eircode_names)) {
print(length(eircode_names[i]))
# if (i%%100 == 0) { print(i) }
}
for (i in 1:nrow(eircode_names)) {
# print(length(eircode_names[i]))
if (i%%100 == 0) { print(i) }
}
nrow(eircode_names)
ncol(eircode_names)
rm(list = ls())
cat("\014")
hp <- read.csv("C:/Users/loughnge/Dropbox/Maps/Excel files/CSO House Value by Eircode.csv",
header = FALSE, stringsAsFactors = FALSE)
hp <- hp[, 4:90]
eircode_names <- hp$V4
eircode_names
eircode_names[8]
eircode_names2 <- as.list(eircode_names)
nrow(eircode_names2)
ncol(eircode_names2)
rm(list = ls())
cat("\014")
hp <- read.csv("C:/Users/loughnge/Dropbox/Maps/Excel files/CSO House Value by Eircode.csv",
header = FALSE, stringsAsFactors = FALSE)
hp <- hp[, 4:90]
eircode_names <- as.list(hp$V4)
for (i in 1:nrow(eircode_names)) {
# print(length(eircode_names[i]))
if (i%%100 == 0) { print(i) }
}
rm(list = ls())
cat("\014")
hp <- read.csv("C:/Users/loughnge/Dropbox/Maps/Excel files/CSO House Value by Eircode.csv",
header = FALSE, stringsAsFactors = FALSE)
hp <- hp[, 4:90]
eircode_names <- hp$V4
for (i in 1:length(eircode_names)) {
# print(length(eircode_names[i]))
if (i%%100 == 0) { print(i) }
}
for (i in 1:length(eircode_names)) {
print(length(eircode_names[i]))
# if (i%%100 == 0) { print(i) }
}
length(eircode_names[1])
length(eircode_names[8])
for (i in 1:length(eircode_names)) {
# print(length(eircode_names[i]))
if (i%%100 == 0) { print(eircode_names[i]) }
}
eircode_names[8]
length(eircode_names[8])
a = eircode_names[8]
length(a)
for (i in 1:length(eircode_names)) {
# print(length(eircode_names[i]))
if (i%%5 == 0) { print(eircode_names[i]) }
}
for (i in 1:length(eircode_names)) {
# print(length(eircode_names[i]))
if (i%%8 == 0) { print(eircode_names[i]) }
}
class(a)
length(eircode_names[8][1])
eircode_names[8][1]
for (i in 1:length(eircode_names)) {
print(nchar(eircode_names[i]))
# if (i%%8 == 0) { print(eircode_names[i]) }
}
for (i in 1:length(eircode_names)) {
# print(nchar(eircode_names[i]))
if (nchar(eircode_names[i]) > 1) { print(eircode_names[i]) }
}
eircode_names <- hp$V4
for (i in 1:length(eircode_names)) {
if (nchar(eircode_names[i]) > 1) {
print(eircode_names[i])
eircode_index[cc] <- i
}
}
